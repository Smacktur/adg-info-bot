import logging
from logging.handlers import RotatingFileHandler
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Router
from aiogram.filters import Command
from parser import parse_request_numbers
import db
from message_formatter import format_telegram_message
from utils import can_update_status, check_transfer_processing
from config import TELEGRAM_BOT_TOKEN, ALLOWED_CHAT_ID

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

previous_results_storage = {}
MAX_STORAGE_SIZE = 1000
bot_username = 'adengi_helper_bot'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
log_file = "bot.log"
handler = RotatingFileHandler(log_file, maxBytes=10*1024*1024, backupCount=5)  # 10 –ú–ë, —Ö—Ä–∞–Ω–∏—Ç—å –¥–æ 5 –∞—Ä—Ö–∏–≤–æ–≤
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        handler,
        logging.StreamHandler()  # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)

logger = logging.getLogger(__name__)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def generate_inline_keyboard():
    update_button = InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="update_status")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[update_button]])
    return keyboard


async def send_or_update_message(chat_id, text, bot, message_id=None):
    keyboard = generate_inline_keyboard()

    if message_id:
        previous_data = previous_results_storage.get(message_id, {})
        previous_text = previous_data.get('text')

        if previous_text == text:
            logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            return

        await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text, reply_markup=keyboard, parse_mode='HTML')
        previous_results_storage[message_id]['text'] = text
        logger.debug(f"–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ previous_results_storage –¥–ª—è message_id={message_id}")
    else:
        sent_message = await bot.send_message(chat_id=chat_id, text=text, reply_markup=keyboard, parse_mode='HTML')
        previous_results_storage[sent_message.message_id] = {
            'text': text,
            'constant_ids': []
        }
        logger.debug(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ previous_results_storage –¥–ª—è –Ω–æ–≤–æ–≥–æ message_id={sent_message.message_id}")
        return sent_message

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command(commands=['help']))
async def help_command_handler(message: types.Message):
    try:
        help_text = (
            "<b>‚òùÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b> \n\n"
            "- –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ <code>username</code> (—á–µ—Ä–µ–∑ @) –∏ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–æ–∫.\n"
            "- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ <code>Ctrl + Shift + Enter</code>.\n"
            "- –§–æ—Ä–º–∞—Ç –Ω–µ –≤–∞–∂–µ–Ω - –±–æ—Ç —Å–ø–∞—Ä—Å–∏—Ç –∑–∞—è–≤–∫–∏ –∏–∑ –≤–∞—à–µ–≥–æ —Ç–µ–∫—Å—Ç–∞.\n"
            "- –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É <code>–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å</code> (—Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É).\n"
            "- –ï—Å–ª–∏ –±–æ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç <code>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</code> –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ ‚Äî –Ω–∞–ø—Ä–∞–≤—å—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞—è–≤–∫–∏ –±–æ—Ç—É (–Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º).\n"
            "- –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 10 –∑–∞—è–≤–æ–∫, —á—Ç–æ–±—ã –ø—Ä–æ—â–µ –±—ã–ª–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å—ã (–∏–Ω–∞—á–µ –Ω–∞–∫—Ä–æ–µ—Ç –ø—Ä–æ—Å—Ç—ã–Ω–µ–π üôà ).\n\n"
            "–ú–∏—Ä–∞ –≤–∞–º!"
        )
        await message.answer(help_text, parse_mode="HTML")
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /help –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{message.from_user.username}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /help: {e}", exc_info=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def handle_message(message: types.Message):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ø–æ–º—è–Ω—É—Ç –ª–∏ –±–æ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if message.entities:
            for entity in message.entities:
                if entity.type == 'mention':
                    mention = message.text[entity.offset:entity.offset + entity.length]
                    if mention == f"@{bot_username}":
                        # –ë–æ—Ç —É–ø–æ–º—è–Ω—É—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        logger.info(f"–ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [@{message.from_user.username}]")

                        # –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–º–µ—Ä–æ–≤ –∑–∞—è–≤–æ–∫
                        request_numbers = parse_request_numbers(message.text)
                        logger.debug(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–æ–∫: {request_numbers}")

                        if request_numbers:
                            # –ó–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                            results = db.query_database(request_numbers)
                            logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞ –≤ –ë–î: {results}")

                            if not results:
                                logger.warning("–ó–∞–ø—Ä–æ—Å –≤ –ë–î –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
                                # await message.answer("–ó–∞–ø—Ä–æ—Å –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–æ–∫.")
                                return

                            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                            formatted_message = format_telegram_message(results)
                            logger.debug(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {formatted_message}")

                            transfer_processing_warning = check_transfer_processing(results)
                            if transfer_processing_warning:
                                formatted_message += f"\n\n{transfer_processing_warning}"
                                logger.debug(
                                    f"–î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ transfer_processing: {transfer_processing_warning}")

                            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                            sent_message = await send_or_update_message(
                                chat_id=message.chat.id,
                                text=formatted_message,
                                bot=bot
                            )
                            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å ID: {sent_message.message_id}")

                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ constant_id –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ –ø–æ –∫–ª—é—á—É message_id
                            constant_ids = [result['constant_id'] for result in results]
                            previous_results_storage[sent_message.message_id] = {
                                'text': formatted_message,
                                'constant_ids': constant_ids
                            }
                            logger.debug(
                                f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID: {sent_message.message_id}, –¥–∞–Ω–Ω—ã–µ: {previous_results_storage[sent_message.message_id]}")
                        else:
                            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞–ª–∏–¥–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ.")
                            # await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–æ–∫ –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.")
                        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ –±–æ—Ç –±—ã–ª —É–ø–æ–º—è–Ω—É—Ç

        # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –±—ã–ª —É–ø–æ–º—è–Ω—É—Ç, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.debug(
            f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞ –∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
@router.callback_query(lambda call: call.data == "update_status")
async def handle_button_click(call: types.CallbackQuery):
    try:
        logger.debug(f"–ö–Ω–æ–ø–∫–∞ '–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å' –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {call.from_user.username}")

        if can_update_status(call.from_user.id, call.message.chat.id):
            logger.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–π–¥–µ–Ω–∞")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            previous_data = previous_results_storage.get(call.message.message_id, {})
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ previous_results_storage: {previous_data}")

            constant_ids = previous_data.get('constant_ids', [])
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ constant_ids: {constant_ids}")

            if constant_ids:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º constant_id
                request_numbers = ", ".join([f"'{constant_id}'" for constant_id in constant_ids])
                logger.debug(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ë–î: {request_numbers}")
                new_results = db.query_database(request_numbers)
                logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ë–î: {new_results}")

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä–µ
                previous_results_storage[call.message.message_id] = {
                    'text': previous_data.get('text'),
                    'constant_ids': [result['constant_id'] for result in new_results]
                }
                logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ previous_results_storage: {previous_results_storage[call.message.message_id]}")

                formatted_message = format_telegram_message(new_results)
                transfer_processing_warning = check_transfer_processing(new_results)
                if transfer_processing_warning:
                    formatted_message += f"\n\n{transfer_processing_warning}"

                await send_or_update_message(
                    chat_id=call.message.chat.id,
                    text=formatted_message,
                    bot=bot,
                    message_id=call.message.message_id
                )
                logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è constant_id: {constant_ids}")
            else:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
                await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        else:
            await call.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–∞–∫ —á–∞—Å—Ç–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}", exc_info=True)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
async def on_startup(bot):
    global bot_username
    bot_info = await bot.get_me()
    bot_username = bot_info.username
    logger.debug(f"–ò–º—è –±–æ—Ç–∞: {bot_username}")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    dp.include_router(router)
    await dp.start_polling(bot, on_startup=on_startup)


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
